require('./Configuration');
const express = require('express');
const cors = require('cors')
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const nodemailer = require('nodemailer')
const registerUserModel = require('./models/RegisterUser');

const app = express();
app.use(express.json())
app.use(cors({
    origin: ['http://localhost:3000'],
    methods: ['GET', 'POST'],
    credentials: true
}))

app.use(cookieParser())

// const verifyUser = (req,res,next)=>{
//     const token =  req.cookies.token;
//     if(!token){
//         return res.json("Token is missing")
//     }
//     else{
//         jwt.verify(token,"jwt-secret-key",(err,decoded)=>{
//             if(err){
//                 return res.json("Error with Token")
//             }
//             else{
//                 if(decoded.role === "admin"){
//                     next()
//                 }
//                 else{
//                     return res.json("not admin")
//                 }
//             }
//         })
//     }
// }

// app.get('/dashboard',verifyUser,(req,res)=>{
//     res.json("Success")
// })

app.post('/register', (req, res) => {
    const { username, email, password, mono } = req.body;

    registerUserModel.findOne({ email })
        .then(existingUser => {
            if (existingUser) {
                console.log("User with this email already exists");
                return res.status(400).json({ error: 'User with this email already exists' });
            }

            bcrypt.hash(password, 10)
                .then(hash => {
                    registerUserModel.create({ username, email, password: hash, mono })
                        .then(newUser => {
                            console.log("Registration successful");
                            res.json(newUser);
                        })
                        .catch(err => {
                            console.error(err);
                            res.status(500).json({ error: err.message });
                        });
                })
                .catch(err => {
                    console.error(err);
                    res.status(500).json({ error: err.message });
                });
        })
        .catch(err => {
            console.error(err);
            res.status(500).json({ error: err.message });
        });
});


app.post('/login', (req, res) => {
    const { email, password } = req.body;

    registerUserModel.findOne({ email })
        .then(user => {
            if (user) {
                bcrypt.compare(password, user.password, (err, response) => {
                    if (err) {
                        console.error(err);
                        return res.status(500).json({ message: "Internal server error" });
                    }
                    if (response) {
                        // const token = jwt.sign({ email: user.email }, "jwt-secret-key", { expiresIn: '1d' });
                        // res.cookie('token', token);
                        return res.status(200).json({ message: "success" });
                    } else {
                        return res.status(401).json({ message: "Password is incorrect" });
                    }
                });
            } else {
                res.status(404).json({ message: "User not found" });
            }
        })
        .catch(error => {
            console.error(error);
            res.status(500).json({ message: "Internal server error" });
        });
});


// registerUserModel.find()
//     .then(p => console.log(p))
//     .catch(error => console.log(error));

app.post('/forgot-password', (req, res) => {
    const { email } = req.body;
    registerUserModel.findOne({ email: email })
        .then(user => {
            if (!user) {
                return res.send({ Status: "User not existed" })
            }
            const token = jwt.sign({ id: user._id }, "jwt_secret_key", { expiresIn: "1d" })
            var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: 'kris111kri@gmail.com',
                    pass: 'qyybyogrrfdpmcvx'
                }
            });

            var mailOptions = {
                from: 'kris111kri@gmail.com',
                to: 'gresikheni@gmail.com',
                subject: 'Reset Password Link',
                text: `http://localhost:3000/reset_password/${user._id}/${token}`
            };

            transporter.sendMail(mailOptions, function (error, info) {
                if (error) {
                    console.log(error);
                } else {
                    return res.send({ Status: "Success" })
                }
            });
        })
})

app.post('/reset-password/:id/:token', (req, res) => {
    const { id, token } = req.params
    const { password } = req.body

    jwt.verify(token, "jwt_secret_key", (err, decoded) => {
        if (err) {
            return res.json({ Status: "Error with token" })
        } else {
            bcrypt.hash(password, 10)
                .then(hash => {
                    registerUserModel.findByIdAndUpdate({ _id: id }, { password: hash})
                        .then(u => res.send({ Status: "Success" }))
                        .catch(err => res.send({ Status: err }))
                })
                .catch(err => res.send({ Status: err }))
        }
    })
})

app.listen(5000, () => {
    console.log('Server is running on http://localhost:5000');
});


 // axios.defaults.withCredentials =true;
    // useEffect(()=>{
    //     axios.get('http://localhost:5001')
    //     .then(res=>{
    //         if(res.data==="Success"){
    //             setSuc("OKKK")
    //         }
    //         else{
    //             navigate('/')
    //         }
    //     })
    // })